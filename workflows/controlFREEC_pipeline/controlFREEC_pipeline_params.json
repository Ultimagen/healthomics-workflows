{
      "SomaticCNVCallingControlFREEC.pipeline_version": {
          "description":"Pipeline version",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.base_file_name": {
          "description":"base file name used for some output files",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.input_tumor_cram_bam_file": {
          "description":"Input tumor bam/cram file",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.input_tumor_cram_bam_file_index": {
          "description":"Input tumor bai/crai index file",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.input_normal_cram_bam_file": {
          "description":"Input normal bam/cram file",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.input_normal_cram_bam_file_index": {
          "description":"Input normal bai/crai index file",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.references": {
      "description": "reference object holding reference fasta with corresponding fai and dict files",
      "optional": false
      },
      "SomaticCNVCallingControlFREEC.interval_list": {
          "description" :"interval list for calculating mpileup",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.num_shards": {
          "description" :"shards for scatter interval list",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.scatter_intervals_break": {
          "description" :"breaks for scatter interval list",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.SNPfile": {
          "description" : "vcf file holding locations to for mpileup calculation",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.SNPfile_index" : {
          "description" : "vcf index file for SNPfile",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.normal_mpileup_override": {
          "description" : "pre-calculated mpileup for normal sample",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.tumor_mpileup_override": {
          "description" :"pre-calculated mpileup for tumor sample",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.mapq_override": {
          "description" :"Reads mapping-quality cutoff for coverage calculation. Default is 1",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.genome_windows": {
          "description" :"bed file holding the entire genome binned to same size windows",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.collect_coverage_region": {
          "description" :"specific genomic region for coverage collection",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.normal_coverage_cpn": {
          "description" :"pre-calculated normal binned coverage file in the format needed for controlFREEC",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.tumor_coverage_cpn": {
          "description" :"pre-calculated tumor binned coverage file in the format needed for controlFREEC",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.normal_sorter_zipped_bed_graph": {
          "description" :"pre-calculated normal bedGraph file (generated by Sorter)",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.tumor_sorter_zipped_bed_graph": {
          "description" : "pre-calculated tumor bedGraph file (generated by Sorter)",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.BedGraphOutput": {
          "description" : "Whether to add BedGraphOutput to controlFREEC outputs",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.contaminationAdjustment": {
          "description" : "Whether to run controlFREEC with contaminationAdjustment option",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.inputFormat": {
          "description" : "controlFREEC input format",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.window": {
          "description" : "window size of binned genome",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.chrLenFile_override": {
          "description" : "chromosome lengths file different from references.ref_fasta_index focusing controlFREEC regions",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.degree": {
          "description" : "controlFREEC option. Default is 3",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.ploidy": {
          "description" : "known sample ploidy",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.maxThreads_override": {
          "description" : "maximal threads for controlFREEC. Default is 8",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.sex": {
          "description" : "sample sex value. should be 'XX' or 'XY'",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.gemMappabilityFile" :{
            "description": "a gem file holding mappablity biased regions. ",
            "optional": true
        },
      "SomaticCNVCallingControlFREEC.min_cnv_length" : {
          "description" : "minimum length for called CNVs. Default is 10000",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.intersection_cutoff": {
          "description" : "Intersection cutoff with UG-CNV-LCR regions to filter out CNV calls. Default is  0.5",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.cnv_lcr_file": {
          "description" : "UG-CNV-LCR bed file",
          "optional": false
      },
      "SomaticCNVCallingControlFREEC.no_address_override": {
          "description" : "no_address_override",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.preemptible_tries_override": {
          "description" : "number of preemptible tries",
          "optional": true
      },
      "SomaticCNVCallingControlFREEC.monitoring_script_input" : {
        "description" : "monitoring_script_input",
        "optional": true
      }
}